name: build-release-stable
on:
  push:
#    tags: 'v*'

env:
  python_win_version: 3.11.3
  repo_dir: nagstamon-jekyll/docs/repo
  cr_image: ghcr.io/henriwahl/build-nagstamon
  cr_image_version: 1

jobs:
  debian:
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} -f build/docker/Dockerfile-${{ github.job }} .
      #- run: /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon -e DEB_BUILD_OPTIONS=nocheck ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.deb
          retention-days: 1
          if-no-files-found: error

  fedora-35:
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} -f build/docker/Dockerfile-${{ github.job }} .
      #- run: /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  fedora-36:
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} -f build/docker/Dockerfile-${{ github.job }} .
      #- run: /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  fedora-37:
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} -f build/docker/Dockerfile-${{ github.job }} .
      #- run: /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  fedora-38:
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} -f build/docker/Dockerfile-${{ github.job }} .
      #- run: /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  rhel-9:
    runs-on: ubuntu-latest
    #needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      #- run: /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

# borrowed from dhcpy6d
  repo-debian:
    runs-on: ubuntu-latest
    # try to avoid race condition and start uploading only after the last install package has been build
    #needs: [debian, fedora-35, fedora-36, fedora-37, fedora-38, rhel-9]
    needs: [repo-rpm-fedora]
    env:
      family: debian
      release: stable
    steps:
      - uses: actions/checkout@v3
      # get binaries created by other jobs
      - uses: actions/download-artifact@v3
      # get secret signing key
      - run: echo "${{ secrets.PACKAGE_SIGNING_KEY }}" >  signing_key.asc
      # organize SSH deploy key for nagstamon-jekyll repo
      - run: mkdir ~/.ssh
      - run: echo "${{ secrets.NAGSTAMON_REPO_KEY_WEB }}" >  ~/.ssh/id_ed25519
      - run: chmod -R go-rwx ~/.ssh
      # get and prepare nagstamon-jekyll
      - run: git clone git@github.com:HenriWahl/nagstamon-jekyll.git
      - run: rm -rf ${{ env.repo_dir }}/${{ env.family }}/${{ env.dist }}/${{ env.release }}
      - run: mkdir -p ${{ env.repo_dir }}/${{ env.family }}/${{ env.dist }}/${{ env.release }}
      # create deb repo via Debian build container
      - run: |
          /usr/bin/docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -v $PWD/${{ env.repo_dir }}/${{ env.family }}/${{ env.release }}:/repo ${{ env.cr_image }}-${{ env.family }}:${{ env.cr_image_version }} \
          /bin/sh -c "cd /workspace && \
                      gpg --import signing_key.asc && \
                      cp -r artifact/*.deb nagstamon-jekyll/docs/repo/${{ env.family }}/${{ env.release }} && \
                      cd nagstamon-jekyll/docs/repo/${{ env.family }}/${{ env.release }}
                      dpkg-scanpackages . > Packages && \
                      gzip -k -f Packages && \
                      apt-ftparchive release . > Release && \
                      gpg -abs -o Release.gpg Release && \
                      gpg --clearsign -o InRelease Release && \
                      gpg --output key.gpg --armor --export"
      # commit and push new binaries to nagstamon-jekyll
      - run: git config --global user.email "repo@nagstamon.de" && git config --global user.name "Nagstamon Repository"
      #- run: cd ${{ env.repo_dir }} && git add . && git commit -am "new ${{ env.release }} repo ${{ env.family }}" && git push

  repo-rpm-fedora:
    runs-on: ubuntu-latest
    # if not all are ready there might be trouble when downloading artifacts
    # maybe faster now with build containers
    needs: [ debian, fedora-35, fedora-36, fedora-37, fedora-38, rhel-9 ]
#    needs: [ debian, fedora-35, fedora-36, fedora-37, rhel-9 ]
    env:
      family: fedora
    steps:
      # get binaries created by other jobs
      - uses: actions/download-artifact@v3
      # organize SSH deploy key for nagstamon-repo
      - run: mkdir ~/.ssh
      - run: echo "${{ secrets.NAGSTAMON_REPO_KEY_WEB }}" >  ~/.ssh/id_ed25519
      - run: chmod -R go-rwx ~/.ssh
      # get and prepare nagstamon-jekyll
      - run: git clone git@github.com:HenriWahl/nagstamon-jekyll.git
      - run: rm -rf ${{ env.repo_dir }}/${{ env.family }}/??
      # copy *.rpm files into nagstamon-jekyll
      - run: |
          ls -l artifact/*.noarch.rpm && \
          for noarch_rpm in artifact/*.noarch.rpm; \
            do \
              echo "'${noarch_rpm}'";
          done &&
          for noarch_rpm in artifact/*.noarch.rpm; \
            do \
              version=$(echo ${noarch_rpm} | python3 -c "file=input(); print(file.split('${{ env.family }}')[1].split('.')[0])") && \
              mkdir -p mkdir -p ${{ env.repo_dir }}/${{ env.family }}/${version} && \
              cp -r artifact/*.${{ env.family }}${version}* ${{ env.repo_dir }}/${{ env.family }}/${version} && \
              echo "DEEEBBBUUGGG---->${noarch_rpm} ${version}" && \
              docker run --rm -v ${PWD}/${{ env.repo_dir }}/${{ env.family }}/${version}:/repo \
                ${{ env.cr_image }}-${{ env.family }}-${version} \
                /bin/bash -c "createrepo --verbose --workers 1 /repo" && \
              ls -laR ${PWD}/${{ env.repo_dir }}/${{ env.family }}/${version}; \
            done
      - run: echo "DEBUG"
      # create rpm repo via Fedora container
#      - run: docker run --rm -v $PWD/${{ env.repo_dir }}/${{ env.family }}/latest:/repo ${{ env.cr_image }}-fedora-${version} /bin/bash -c "ls -lR /repo && /usr/bin/createrepo /repo"
#       commit and push new binaries to nagstamon-repo
      - run: git config --global user.email "repo@nagstamon.de" && git config --global user.name "Nagstamon Repository"
    #  - run: cd ${{ env.repo_dir }} && git pull && git add . && git commit -am "new latest repo ${{ env.family }}" && git push

  repo-rpm-rhel:
    runs-on: ubuntu-latest
    # if not all are ready there might be trouble when downloading artifacts
    # maybe faster now with build containers
    needs: [repo-rpm-fedora]
    env:
      family: rhel
      version: 9
    steps:
      # get binaries created by other jobs
      - uses: actions/download-artifact@v3
      # organize SSH deploy key for nagstamon-repo
      - run: mkdir ~/.ssh
      - run: echo "${{ secrets.NAGSTAMON_REPO_KEY_WEB }}" >  ~/.ssh/id_ed25519
      - run: chmod -R go-rwx ~/.ssh
      # get and prepare nagstamon-jekyll
      - run: git clone git@github.com:HenriWahl/nagstamon-jekyll.git
      - run: rm -rf ${{ env.repo_dir }}/${{ env.family }}/${{ env.version }}
      - run: mkdir -p ${{ env.repo_dir }}/${{ env.family }}/${{ env.version }}
      # copy *.rpm files into nagstamon-jekyll
      - run: cp -r artifact/*.${{ env.family }}*.rpm ${{ env.repo_dir }}/${{ env.family }}/${{ env.version }}
      # create rpm repo via Fedora container
      - run: docker run --rm -v $PWD/${{ env.repo_dir }}/${{ env.family }}/${{ env.version }}:/repo fedora /bin/sh -c "dnf -y install createrepo_c && createrepo /repo"
      # commit and push new binaries to nagstamon-repo
      - run: git config --global user.email "repo@nagstamon.de" && git config --global user.name "Nagstamon Repository"
    #  - run: cd ${{ env.repo_dir }} && git pull && git add . && git commit -am "new latest repo ${{ env.family }}" && git push

#  github-release:
#    runs-on: ubuntu-latest
#    needs: [repo-rpm-rhel]
#    steps:
#      - uses: actions/download-artifact@v3
#      - run: cd artifact && md5sum *agstamon* > md5sums.txt
#      - run: cd artifact && sha256sum *agstamon* > sha256sums.txt
#      - uses: marvinpinto/action-automatic-releases@latest
#        with:
#          repo_token: "${{ secrets.GITHUB_TOKEN }}"
#          prerelease: false
#          draft: true
#          files: |
#            artifact/*
